#1Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u)
#from STATION. Your result cannot contain duplicates.

SELECT city
FROM STATION
WHERE LOWER(SUBSTR(CITY,1,1) ) IN('i','o','a','e','u')


2)Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT city
FROM STATION
WHERE LOWER(SUBSTR(CITY,-1) ) IN('i','o','a','e','u')

3)Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) 
as both their first and last characters.Your result cannot contain duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(SUBSTR(CITY,1,1)) IN ('i','o','u','e','a') AND LOWER(SUBSTR(CITY,-1)) IN ('i','o','u','e','a')


4) Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION 
WHERE LOWER(SUBSTR(CITY,1,1)) NOT  IN('i','o','e','a','u')



5)Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION 
WHERE LOWER(SUBSTR(CITY,-1)) NOT IN('a','i','e','u','o')

6)Query the list of CITY names from STATION that either
 do not start with vowels or do not end with vowels.
 Your result cannot contain duplicates.
SELECT DISTINCT CITY 
FROM STATION
WHERE LOWER(SUBSTR(CITY,-1)) NOT IN('a','o','i','e','u') OR LOWER(SUBSTR(CITY,1,1)) NOT IN('a','o','i','e','u')

7) Query the Name of any student in STUDENTS who scored higher than 75
 Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters 
(i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT NAME
FROM STUDENTS
WHERE MARKS > 75 

ORDER BY SUBSTR(NAME,-3),ID ;

8) Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

SELECT NAME
FROM EMPLOYEE
ORDER BY NAME;

9) Write a query that prints a list of employee names (i.e.: the name attribute)
 for employees in Employee having a salary greater than 2000
 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.

SELECT NAME
FROM EMPLOYEE
WHERE SLARY > 2000 AND MONTHS<10;


10)Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.


SELECT CASE
WHEN A >= (B+C) OR C >= (B+A) OR B >= (C+A) THEN 'Not A Triangle'
WHEN A=B AND A=C THEN 'Equilateral'
WHEN (A=B) OR (B=C) OR (C=A)  THEN 'Isosceles'
ELSE 'Scalene'

END
FROM TRIANGLES ;